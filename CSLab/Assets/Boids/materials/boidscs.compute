#pragma kernel CSMain
#define SIMULATION_BLOCK_SIZE 256//thread group size

struct Boid
{
	float3 pos;
	float3 rot;
	float speed;
	float rotSpeed;
};

RWStructuredBuffer<Boid> gBoidBuffer;

//flock properties
int gBoidsCount;
float gNearByDist;
float4 gFlockPos;//cpu中只提供了set vector4

float gDeltaTime;

[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = gBoidBuffer[id.x];

	float3 pos = boid.pos;
	float3 rot = boid.rot;

	//separation
	float3 separation = float3(0.0, 0.0, 0.0);

	//alignment
	float3 alignment = float3(0.0, 0.0, 0.0);

	//cohesion
	float3 cohesion=gFlockPos.xyz;
	float3 tempCohesion = float3(0.0, 0.0, 0.0);

    float tempSpeed = 0;
	uint nearbyCount = 0;


	[loop]//待bitonic cubic grid optimization
	for (int i = 0; i < gBoidsCount; i++)
	{
		if (i != int(id.x))
		{
			Boid tempBoid = gBoidBuffer[i];
			if (length(boid.pos - tempBoid.pos) < gNearByDist)
			{
				separation += boid.pos - tempBoid.pos;

				alignment += tempBoid.rot;

				tempCohesion += tempBoid.pos;

				nearbyCount++;
			}
		}
	}

	if (nearbyCount > 0)
	{
		alignment *= 1 / nearbyCount;
		tempCohesion *= 1 / nearbyCount;
	}

    cohesion += tempCohesion;

	float3 direction = alignment + separation + normalize(cohesion - boid.pos);

	boid.rot = lerp(boid.rot, normalize(direction), gDeltaTime * boid.rotSpeed);

	boid.pos += boid.rot * boid.speed * gDeltaTime;

	gBoidBuffer[id.x] = boid;
}
